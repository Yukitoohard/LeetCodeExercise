/**
 * 描述
获取数字 num 二进制形式第 bit 位的值。注意：
1、bit 从 1 开始
2、返回 0 或 1
3、举例：2 的二进制为 10，第 1 位为 0，第 2 位为 1
示例1
输入：
128, 8
输出：
1
 */

/**
&： 与 两个位都为1时，结果才为1
|： 或 两个位都为0时，结果才为0
^： 异或 两个位相同为0，相异为1
~： 取反 0变1，1变0
<<： 左移 各二进位全部左移若干位，高位丢弃，低位补0
'>>： 右移各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）

先将num右移bit-1位，拿到第bit位。如128二进制表示位10000000，右移7位得到00000001，1就是第bit位。要取得该位，&1即可
 */
function valueAtBit(num, bit) {
    return (num >> (bit - 1)) & 1;
}

function valueAtBit2(num, bit) {
    let Num2Str = num.toString(2);
    return Num2Str[Num2Str.length - bit];
}


console.log(valueAtBit2(5, 3));